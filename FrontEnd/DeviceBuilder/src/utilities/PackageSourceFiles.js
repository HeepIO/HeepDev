import fileDownload from 'react-file-download'
import JSZip from 'jszip'

import ActionAndResponseOpCodes     from '../../../../Firmware/ServerlessFirmware/ActionAndResponseOpCodes.h'
import Arduino_EEPROM               from '../../../../Firmware/ServerlessFirmware/Arduino_EEPROM.h'
import Arduino_Timer                from '../../../../Firmware/ServerlessFirmware/Arduino_Timer.h'
import ArduinoW5100_HeepComms       from '../../../../Firmware/ServerlessFirmware/ArduinoW5100_HeepComms.h'
import AutoGeneratedInfo            from '../../../../Firmware/ServerlessFirmware/AutoGeneratedInfo.h'
import CommonDataTypes              from '../../../../Firmware/ServerlessFirmware/CommonDataTypes.h'
import CreateUniqueID               from '../../../../Firmware/ServerlessFirmware/CreateUniqueID.py'
import Device                       from '../../../../Firmware/ServerlessFirmware/Device.h'
import DeviceMemory                 from '../../../../Firmware/ServerlessFirmware/DeviceMemory.h'
import ENC28J60_HeepComms           from '../../../../Firmware/ServerlessFirmware/ENC28J60_HeepComms.h'
import ESP8266_HeepComms            from '../../../../Firmware/ServerlessFirmware/ESP8266_HeepComms.h'
import globalDefines                from '../../../../Firmware/ServerlessFirmware/globalDefines.h'
import Heep_API                     from '../../../../Firmware/ServerlessFirmware/Heep_API.h'
import MemoryUtilities              from '../../../../Firmware/ServerlessFirmware/MemoryUtilities.h'
import PICW5500_HeepComms           from '../../../../Firmware/ServerlessFirmware/PICW5500_HeepComms.h'
import PICW5500_NonVolatileMemory   from '../../../../Firmware/ServerlessFirmware/PICW5500_NonVolatileMemory.h'
import PICW5500_Timer               from '../../../../Firmware/ServerlessFirmware/PICW5500_Timer.h'
import Scheduler                    from '../../../../Firmware/ServerlessFirmware/Scheduler.h'
import Simulation_HeepComms         from '../../../../Firmware/ServerlessFirmware/Simulation_HeepComms.h'
import Simulation_NonVolatileMemory from '../../../../Firmware/ServerlessFirmware/Simulation_NonVolatileMemory.h'
import Simulation_Timer             from '../../../../Firmware/ServerlessFirmware/Simulation_Timer.h'
import Socket_HeepComms             from '../../../../Firmware/ServerlessFirmware/Socket_HeepComms.h'

export const packageSourceFiles = (deviceDetails, controls) => {

  console.log("Controls: ", controls);
  
  var zip = packageUniversalFiles();

  if (deviceDetails.systemType == "Arduino") {

    zip = packageArduinoFiles(deviceDetails, controls, zip);

  } else if (deviceDetails.systemType == "Linux Based") {

    zip.file('Socket_HeepComms.h', Socket_HeepComms);

  } else if (deviceDetails.systemType == "PIC") {

    zip = packagePICFiles(deviceDetails, controls, zip);

  } else if (deviceDetails.systemType == "Simulation") {

    zip = packageSimulationFiles(deviceDetails, controls, zip);
  }

  var nameZip = deviceDetails.deviceName + '.zip';

  zip.generateAsync({type:"blob"})
  .then(function(content) {
      fileDownload(content, nameZip);
  });

}

const packageUniversalFiles = () => {
  var zip = new JSZip();

  zip.file('ActionAndResponseOpCodes.h', ActionAndResponseOpCodes);
  zip.file('AutoGeneratedInfo.h', AutoGeneratedInfo);
  zip.file('CommonDataTypes.h', CommonDataTypes);
  zip.file('CreateUniqueID.py', CreateUniqueID);
  zip.file('Device.h', Device);
  zip.file('DeviceMemory.h', DeviceMemory);
  zip.file('globalDefines.h', globalDefines);
  zip.file('Heep_API.h', Heep_API);
  zip.file('MemoryUtilities.h', MemoryUtilities);
  zip.file('Scheduler.h', Scheduler);

  return zip
}

const packageSimulationFiles = (deviceDetails, controls, zip) => {

  zip.file('Simulation_HeepComms.h', Simulation_HeepComms);
  zip.file('Simulation_NonVolatileMemory.h', Simulation_NonVolatileMemory);
  zip.file('Simulation_Timer.h', Simulation_Timer);

  return zip
}

const packagePICFiles = (deviceDetails, controls, zip) => {


  zip.file('PICW5500_HeepComms.h', PICW5500_HeepComms);
  zip.file('PICW5500_NonVolatileMemory.h', PICW5500_NonVolatileMemory);
  zip.file('PICW5500_Timer.h', PICW5500_Timer);

  // Deprecated
  // zip.file('ENC28J60_HeepComms.h', ENC28J60_HeepComms);

}

const packageArduinoFiles = (deviceDetails, controls, zip) => {

  zip.file(deviceDetails.deviceName + ".ino", composeInoFile(deviceDetails, controls));

  zip.file('ESP8266_HeepComms.h', ESP8266_HeepComms);
  zip.file('ArduinoW5100_HeepComms.h', ArduinoW5100_HeepComms);
  zip.file('Simulation_NonVolatileMemory.h', Simulation_NonVolatileMemory);
  zip.file('Arduino_Timer.h', Arduino_Timer);

  return zip
}

const composeInoFile = (deviceDetails, controls) => {

    var fileContent = `
#define ON_ARDUINO
#include "Heep_API.h"

char deviceName [] = "` + deviceDetails.deviceName + `";\n\n`
+ initializeControls(controls)
+ `void setup()
{

  Serial.begin(115200);
  SetupHeepDevice(deviceName);\n\n  `  
+ setControls(controls)
+ `SetupHeepTasks();
  CreateInterruptServer();
}

void loop()
{
  PerformHeepTasks();
  
}`

  return fileContent
}

const initializeControls = (controls) => {

  var controlDefs = ``;
  for (var i in controls) {
    controlDefs += `char controlName` + i + ` [] = "` + controls[i].controlName + `";\nControl control` + i + `;\n\n`
  }

  return controlDefs

}

const setControls = (controls) => {
  var controlConfigs = ``;
  
  for (var i in controls) {
    controlConfigs += `control` + i + `.controlName = ` + `controlName` + i + `;\n  `;
    controlConfigs += `control` + i + `.controlID = ` + controls[i].controlID + `;\n  `;
    controlConfigs += `control` + i + `.controlDirection = ` + controls[i].controlDirection + `;\n  `;
    controlConfigs += `control` + i + `.controlType = ` + controls[i].controlType + `;\n  `;
    controlConfigs += `control` + i + `.highValue = ` + controls[i].highValue + `;\n  `;
    controlConfigs += `control` + i + `.lowValue = ` + controls[i].lowValue + `;\n  `;
    controlConfigs += `control` + i + `.curValue = ` + controls[i].curValue + `;\n  `;
    controlConfigs += `AddControl(control` + i + `);\n\n  `;
  }

  return controlConfigs
}

